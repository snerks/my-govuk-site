---
export interface PaginationPage {
  number: number;
  href: string;
  current?: boolean;
}

export interface Props {
  currentPage: number;
  totalPages: number;
  previousHref?: string;
  nextHref?: string;
  previousText?: string;
  nextText?: string;
  ariaLabel?: string;
  baseHref?: string;
  maxVisiblePages?: number;
}

const { 
  currentPage, 
  totalPages, 
  previousHref, 
  nextHref, 
  previousText = "Previous",
  nextText = "Next",
  ariaLabel = "Pagination",
  baseHref = "#",
  maxVisiblePages = 5
} = Astro.props;

function generateVisiblePages(current: number, total: number, maxVisible: number): PaginationPage[] {
  const pages: PaginationPage[] = [];
  
  if (total <= maxVisible) {
    for (let i = 1; i <= total; i++) {
      pages.push({
        number: i,
        href: baseHref.replace('#', `${i}`),
        current: i === current
      });
    }
  } else {
    let start = Math.max(1, current - Math.floor(maxVisible / 2));
    let end = Math.min(total, start + maxVisible - 1);
    
    if (end - start + 1 < maxVisible) {
      start = Math.max(1, end - maxVisible + 1);
    }
    
    if (start > 1) {
      pages.push({ number: 1, href: baseHref.replace('#', '1') });
      if (start > 2) {
        pages.push({ number: -1, href: '' }); // Ellipsis marker
      }
    }
    
    for (let i = start; i <= end; i++) {
      pages.push({
        number: i,
        href: baseHref.replace('#', `${i}`),
        current: i === current
      });
    }
    
    if (end < total) {
      if (end < total - 1) {
        pages.push({ number: -2, href: '' }); // Ellipsis marker
      }
      pages.push({ number: total, href: baseHref.replace('#', `${total}`) });
    }
  }
  
  return pages;
}

const visiblePages = generateVisiblePages(currentPage, totalPages, maxVisiblePages);
const hasPrevious = currentPage > 1;
const hasNext = currentPage < totalPages;
---

<nav class="govuk-pagination" aria-label={ariaLabel}>
  {hasPrevious && previousHref && (
    <div class="govuk-pagination__prev">
      <a class="govuk-link govuk-pagination__link" href={previousHref} rel="prev">
        <svg class="govuk-pagination__icon govuk-pagination__icon--prev" xmlns="http://www.w3.org/2000/svg" height="13" width="15" aria-hidden="true" focusable="false" viewBox="0 0 15 13">
          <path d="m6.5938-0.0078125-6.7266 6.7266 6.7441 6.4062 1.377-1.449-4.1856-3.9768h12.896v-2h-12.984l4.2931-4.293-1.414-1.414z"></path>
        </svg>
        <span class="govuk-pagination__link-title">
          {previousText}<span class="govuk-visually-hidden"> page</span>
        </span>
      </a>
    </div>
  )}
  
  <ul class="govuk-pagination__list">
    {visiblePages.map((page) => (
      <li class={`govuk-pagination__item ${page.current ? 'govuk-pagination__item--current' : ''}`}>
        {page.number > 0 ? (
          <a 
            class="govuk-link govuk-pagination__link" 
            href={page.href} 
            aria-label={`Page ${page.number}`}
            aria-current={page.current ? "page" : undefined}
          >
            {page.number}
          </a>
        ) : (
          <span class="govuk-pagination__item govuk-pagination__item--ellipses">
            â‹¯
          </span>
        )}
      </li>
    ))}
  </ul>
  
  {hasNext && nextHref && (
    <div class="govuk-pagination__next">
      <a class="govuk-link govuk-pagination__link" href={nextHref} rel="next">
        <span class="govuk-pagination__link-title">
          {nextText}<span class="govuk-visually-hidden"> page</span>
        </span>
        <svg class="govuk-pagination__icon govuk-pagination__icon--next" xmlns="http://www.w3.org/2000/svg" height="13" width="15" aria-hidden="true" focusable="false" viewBox="0 0 15 13">
          <path d="m8.107-0.0078125-1.4136 1.414 4.2926 4.293h-12.986v2h12.896l-4.1855 3.9766 1.377 1.4492 6.7441-6.4062-6.7246-6.7266z"></path>
        </svg>
      </a>
    </div>
  )}
</nav>